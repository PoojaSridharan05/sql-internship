--creating employee table--
CREATE TABLE employee (
    emp_id     NUMERIC(10) NOT NULL,
    emp_name   VARCHAR2(50) NOT NULL,
    salary     NUMBER(20),
    dept_name  VARCHAR2(50),
    CONSTRAINT emp_pk PRIMARY KEY ( emp_id )
);
--creating department table--
CREATE TABLE department (
    dept_id    NUMERIC(10) NOT NULL,
    dept_name  VARCHAR2(50) NOT NULL,
    emp_id           NUMERIC(10) NOT NULL,
    CONSTRAINT fk_dept FOREIGN KEY ( emp_id )
        REFERENCES employee ( emp_id )
);
--creating log data table--
CREATE TABLE log_data
(
AUDIT_ID	NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
TABLE_NAME	VARCHAR2(30),
TRANSACTION_NAME	VARCHAR2(10),
TRANSACTION_DATE	VARCHAR2(20),
EMP_ID	NUMBER(10),
EMP_NAME VARCHAR2(20),
SALARY NUMBER(30),
DEPT_NAME	VARCHAR2(30),
DEPT_ID	NUMBER(20)
);
--creating procedure--
set serveroutput on;
CREATE OR REPLACE PROCEDURE emp_dep_disys(
    emp_id1     IN   NUMBER,
    emp_name1   IN  VARCHAR2,
    salary1     IN  NUMBER,
    dept_name1  IN  VARCHAR2,
    dept_id1    IN  NUMBER
) IS
    e_value NUMBER(20);
    p_value NUMBER(20);
    ex_invalid_id  EXCEPTION;
--CURSOR
    CURSOR c1 IS
    SELECT
        emp_id
    FROM
        employee
    WHERE
        emp_id = emp_id1;
        


BEGIN
    OPEN c1;
    FETCH c1 INTO e_value;
    IF e_value <= 0 THEN 
      RAISE ex_invalid_id; 
      
      ELSE
        IF ( c1%notfound ) THEN
        INSERT INTO employee (
            emp_id,
            emp_name,
            salary,
            dept_name
        ) VALUES (
            emp_id1,
            emp_name1,
            salary1,
            dept_name1
        );

        INSERT INTO department (
            dept_id,
            dept_name,
            emp_id
        ) VALUES (
            dept_id1,
            dept_name1,
            emp_id1
        );

        COMMIT;
        dbms_output.put_line('Value inserted successfully for: ' ||emp_name1);
    ELSE
		--UPDATING the record
        UPDATE employee
        SET
            emp_name = emp_name1,
            salary = salary1,
            dept_name = dept_name1
        WHERE
            emp_id = e_value;

        UPDATE department
        SET
            dept_id = dept_id1,
            dept_name = dept_name1
        WHERE
            emp_id = e_value;
            

        COMMIT;
         dbms_output.put_line('Value inserted successfully for: ' ||emp_id1);

        END IF ;
    END IF;
   
    CLOSE c1;
   EXCEPTION 
    
      WHEN ex_invalid_id THEN 
       dbms_output.put_line('ID must be greater than zero!');
      WHEN invalid_number THEN
       dbms_output.put_line('Datatype is invalid');
      WHEN value_error THEN
       dbms_output.put_line('value is longer than the declared length '); 
      WHEN invalid_cursor THEN
       dbms_output.put_line('****invalid cursor identified****');
     WHEN OTHERS THEN 
      raise_application_error(-20001,'error occured- '||SQLCODE||' -ERROR- '||sqlerrm);

   
END;
exec emp_dep_disys (1,'Pooja',500,'Dev',10);
exec emp_dep_disys (2,'Nairobi',2000,'IT',10);
exec emp_dep_disys (3,'Chloe',4000,'ITIS',10);
exec emp_dep_disys (1,'Pooja_S',5000,'Dev',10);



CREATE OR REPLACE TRIGGER emp_log AFTER
    INSERT OR UPDATE OR DELETE ON employee
    FOR EACH ROW
DECLARE
    l_transac   VARCHAR2(10);
    table_name  VARCHAR2(20);
BEGIN
    CASE
        WHEN inserting THEN
            l_transac := 'insert';
        WHEN updating THEN
            l_transac := 'UPDATE';
        WHEN deleting THEN
            l_transac := 'DELETE';
    END CASE;

    table_name := 'employee';
    INSERT INTO log_data(
        table_name,
        transaction_name,
        transaction_date,
        emp_id,
        emp_name,
        dept_name
    ) VALUES (
        table_name,
        l_transac,
        to_char(sysdate, 'MM-DD-YYYY HH24:MI:SS'),
        :new.emp_id,
        :new.emp_name,
        :new.dept_name
    );
END;


CREATE OR REPLACE  TRIGGER dept_log AFTER
    INSERT OR UPDATE OR DELETE ON department
    FOR EACH ROW
DECLARE
    l_value     VARCHAR2(10);
    table_name  VARCHAR2(20);
BEGIN
    CASE
        WHEN inserting THEN
            l_value := 'insert';
        WHEN updating THEN
            l_value := 'UPDATE';
        WHEN deleting THEN
            l_value := 'DELETE';
    END CASE;

    table_name := 'department';
    INSERT INTO log_data (
        table_name,
        transaction_name,
        transaction_date,
        emp_id,
        dept_name,
        dept_id
    ) VALUES (
        table_name,
        l_value,
        to_char(sysdate, 'MM-DD-YYYY HH24:MI:SS'),
        :new.emp_id,
        :new.dept_name,
        :new.dept_id
    );
END;